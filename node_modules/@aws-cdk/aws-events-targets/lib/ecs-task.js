"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const ecs = require("@aws-cdk/aws-ecs");
const events = require("@aws-cdk/aws-events");
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const custom = require("@aws-cdk/custom-resources");
const util_1 = require("./util");
/**
 * Start a task on an ECS cluster
 */
class EcsTask {
    constructor(props) {
        this.props = props;
        this.cluster = props.cluster;
        this.taskDefinition = props.taskDefinition;
        this.taskCount = props.taskCount !== undefined ? props.taskCount : 1;
        if (this.taskDefinition.networkMode === ecs.NetworkMode.AWS_VPC) {
            this.securityGroup = props.securityGroup || new ec2.SecurityGroup(this.taskDefinition, 'SecurityGroup', { vpc: this.props.cluster.vpc });
        }
    }
    /**
     * Allows using tasks as target of CloudWatch events
     */
    bind(rule, id) {
        const policyStatements = [new iam.PolicyStatement({
                actions: ['ecs:RunTask'],
                resources: [this.taskDefinition.taskDefinitionArn],
                conditions: {
                    ArnEquals: { "ecs:cluster": this.cluster.clusterArn }
                }
            })];
        // If it so happens that a Task Execution Role was created for the TaskDefinition,
        // then the CloudWatch Events Role must have permissions to pass it (otherwise it doesn't).
        if (this.taskDefinition.executionRole !== undefined) {
            policyStatements.push(new iam.PolicyStatement({
                actions: ['iam:PassRole'],
                resources: [this.taskDefinition.executionRole.roleArn],
            }));
        }
        // For Fargate task we need permission to pass the task role.
        if (this.taskDefinition.isFargateCompatible) {
            policyStatements.push(new iam.PolicyStatement({
                actions: ['iam:PassRole'],
                resources: [this.taskDefinition.taskRole.roleArn]
            }));
        }
        const arn = this.cluster.clusterArn;
        const role = util_1.singletonEventRole(this.taskDefinition, policyStatements);
        const containerOverrides = this.props.containerOverrides && this.props.containerOverrides
            .map(({ containerName, ...overrides }) => ({ name: containerName, ...overrides }));
        const input = { containerOverrides };
        const taskCount = this.taskCount;
        const taskDefinitionArn = this.taskDefinition.taskDefinitionArn;
        // Use a custom resource to "enhance" the target with network configuration
        // when using awsvpc network mode.
        if (this.taskDefinition.networkMode === ecs.NetworkMode.AWS_VPC) {
            const subnetSelection = this.props.subnetSelection || { subnetType: ec2.SubnetType.PRIVATE };
            const assignPublicIp = subnetSelection.subnetType === ec2.SubnetType.PRIVATE ? 'DISABLED' : 'ENABLED';
            new custom.AwsCustomResource(this.taskDefinition, 'PutTargets', {
                // `onCreateÂ´ defaults to `onUpdate` and we don't need an `onDelete` here
                // because the rule/target will be owned by CF anyway.
                onUpdate: {
                    service: 'CloudWatchEvents',
                    apiVersion: '2015-10-07',
                    action: 'putTargets',
                    parameters: {
                        Rule: core_1.Stack.of(this.taskDefinition).parseArn(rule.ruleArn).resourceName,
                        Targets: [
                            {
                                Arn: arn,
                                Id: id,
                                EcsParameters: {
                                    TaskDefinitionArn: taskDefinitionArn,
                                    LaunchType: this.taskDefinition.isEc2Compatible ? 'EC2' : 'FARGATE',
                                    NetworkConfiguration: {
                                        awsvpcConfiguration: {
                                            Subnets: this.props.cluster.vpc.selectSubnets(subnetSelection).subnetIds,
                                            AssignPublicIp: assignPublicIp,
                                            SecurityGroups: this.securityGroup && [this.securityGroup.securityGroupId],
                                        }
                                    },
                                    TaskCount: taskCount,
                                },
                                Input: JSON.stringify(input),
                                RoleArn: role.roleArn
                            }
                        ]
                    },
                    physicalResourceId: this.taskDefinition.node.uniqueId,
                },
                policyStatements: [
                    new iam.PolicyStatement({
                        actions: ['events:PutTargets'],
                        resources: [rule.ruleArn],
                    }),
                    new iam.PolicyStatement({
                        actions: ['iam:PassRole'],
                        resources: [role.roleArn],
                    })
                ]
            });
        }
        return {
            id: '',
            arn,
            role,
            ecsParameters: {
                taskCount,
                taskDefinitionArn
            },
            input: events.RuleTargetInput.fromObject(input),
            targetResource: this.taskDefinition,
        };
    }
}
exports.EcsTask = EcsTask;
//# sourceMappingURL=data:application/json;base64,