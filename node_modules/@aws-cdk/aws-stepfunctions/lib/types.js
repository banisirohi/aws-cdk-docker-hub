"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Predefined error strings
 */
class Errors {
}
/**
 * Matches any Error.
 */
Errors.ALL = 'States.ALL';
/**
 * A Task State either ran longer than the “TimeoutSeconds” value, or
 * failed to heartbeat for a time longer than the “HeartbeatSeconds” value.
 */
Errors.TIMEOUT = 'States.Timeout';
/**
 * A Task State failed during the execution.
 */
Errors.TASKS_FAILED = 'States.TaskFailed';
/**
 * A Task State failed because it had insufficient privileges to execute
 * the specified code.
 */
Errors.PERMISSIONS = 'States.Permissions';
/**
 * A Task State’s “ResultPath” field cannot be applied to the input the state received.
 */
Errors.RESULT_PATH_MATCH_FAILURE = 'States.ResultPathMatchFailure';
/**
 * A branch of a Parallel state failed.
 */
Errors.BRANCH_FAILED = 'States.BranchFailed';
/**
 * A Choice state failed to find a match for the condition field extracted
 * from its input.
 */
Errors.NO_CHOICE_MATCHED = 'States.NoChoiceMatched';
exports.Errors = Errors;
/**
 * Special string value to discard state input, output or result
 */
exports.DISCARD = 'DISCARD';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQW9DQTs7R0FFRztBQUNILE1BQWEsTUFBTTs7QUFDZjs7R0FFRztBQUNvQixVQUFHLEdBQUcsWUFBWSxDQUFDO0FBRTFDOzs7R0FHRztBQUNvQixjQUFPLEdBQUcsZ0JBQWdCLENBQUM7QUFFbEQ7O0dBRUc7QUFDb0IsbUJBQVksR0FBRyxtQkFBbUIsQ0FBQztBQUUxRDs7O0dBR0c7QUFDb0Isa0JBQVcsR0FBRyxvQkFBb0IsQ0FBQztBQUUxRDs7R0FFRztBQUNvQixnQ0FBeUIsR0FBRywrQkFBK0IsQ0FBQztBQUVuRjs7R0FFRztBQUNvQixvQkFBYSxHQUFHLHFCQUFxQixDQUFDO0FBRTdEOzs7R0FHRztBQUNvQix3QkFBaUIsR0FBRyx3QkFBd0IsQ0FBQztBQXJDeEUsd0JBc0NDO0FBa0VEOztHQUVHO0FBQ1UsUUFBQSxPQUFPLEdBQUcsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IENoYWluIH0gZnJvbSAnLi9jaGFpbic7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vc3RhdGVzL3N0YXRlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHN0YXRlcyB0aGF0IGNhbiBoYXZlICduZXh0JyBzdGF0ZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTmV4dGFibGUge1xuICAgIC8qKlxuICAgICAqIEdvIHRvIHRoZSBpbmRpY2F0ZWQgc3RhdGUgYWZ0ZXIgdGhpcyBzdGF0ZVxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGNoYWluIG9mIHN0YXRlcyBidWlsdCB1cFxuICAgICAqL1xuICAgIG5leHQoc3RhdGU6IElDaGFpbmFibGUpOiBDaGFpbjtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBpbiBhIENoYWluXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNoYWluYWJsZSB7XG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpdmUgaWRlbnRpZmllciBmb3IgdGhpcyBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXJ0IHN0YXRlIG9mIHRoaXMgY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhcnRTdGF0ZTogU3RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2hhaW5hYmxlIGVuZCBzdGF0ZShzKSBvZiB0aGlzIGNoYWluYWJsZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuZFN0YXRlczogSU5leHRhYmxlW107XG59XG5cbi8qKlxuICogUHJlZGVmaW5lZCBlcnJvciBzdHJpbmdzXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvcnMge1xuICAgIC8qKlxuICAgICAqIE1hdGNoZXMgYW55IEVycm9yLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQUxMID0gJ1N0YXRlcy5BTEwnO1xuXG4gICAgLyoqXG4gICAgICogQSBUYXNrIFN0YXRlIGVpdGhlciByYW4gbG9uZ2VyIHRoYW4gdGhlIOKAnFRpbWVvdXRTZWNvbmRz4oCdIHZhbHVlLCBvclxuICAgICAqIGZhaWxlZCB0byBoZWFydGJlYXQgZm9yIGEgdGltZSBsb25nZXIgdGhhbiB0aGUg4oCcSGVhcnRiZWF0U2Vjb25kc+KAnSB2YWx1ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRJTUVPVVQgPSAnU3RhdGVzLlRpbWVvdXQnO1xuXG4gICAgLyoqXG4gICAgICogQSBUYXNrIFN0YXRlIGZhaWxlZCBkdXJpbmcgdGhlIGV4ZWN1dGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRBU0tTX0ZBSUxFRCA9ICdTdGF0ZXMuVGFza0ZhaWxlZCc7XG5cbiAgICAvKipcbiAgICAgKiBBIFRhc2sgU3RhdGUgZmFpbGVkIGJlY2F1c2UgaXQgaGFkIGluc3VmZmljaWVudCBwcml2aWxlZ2VzIHRvIGV4ZWN1dGVcbiAgICAgKiB0aGUgc3BlY2lmaWVkIGNvZGUuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQRVJNSVNTSU9OUyA9ICdTdGF0ZXMuUGVybWlzc2lvbnMnO1xuXG4gICAgLyoqXG4gICAgICogQSBUYXNrIFN0YXRl4oCZcyDigJxSZXN1bHRQYXRo4oCdIGZpZWxkIGNhbm5vdCBiZSBhcHBsaWVkIHRvIHRoZSBpbnB1dCB0aGUgc3RhdGUgcmVjZWl2ZWQuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBSRVNVTFRfUEFUSF9NQVRDSF9GQUlMVVJFID0gJ1N0YXRlcy5SZXN1bHRQYXRoTWF0Y2hGYWlsdXJlJztcblxuICAgIC8qKlxuICAgICAqIEEgYnJhbmNoIG9mIGEgUGFyYWxsZWwgc3RhdGUgZmFpbGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQlJBTkNIX0ZBSUxFRCA9ICdTdGF0ZXMuQnJhbmNoRmFpbGVkJztcblxuICAgIC8qKlxuICAgICAqIEEgQ2hvaWNlIHN0YXRlIGZhaWxlZCB0byBmaW5kIGEgbWF0Y2ggZm9yIHRoZSBjb25kaXRpb24gZmllbGQgZXh0cmFjdGVkXG4gICAgICogZnJvbSBpdHMgaW5wdXQuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBOT19DSE9JQ0VfTUFUQ0hFRCA9ICdTdGF0ZXMuTm9DaG9pY2VNYXRjaGVkJztcbn1cblxuLyoqXG4gKiBSZXRyeSBkZXRhaWxzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmV0cnlQcm9wcyB7XG4gICAgLyoqXG4gICAgICogRXJyb3JzIHRvIHJldHJ5XG4gICAgICpcbiAgICAgKiBBIGxpc3Qgb2YgZXJyb3Igc3RyaW5ncyB0byByZXRyeSwgd2hpY2ggY2FuIGJlIGVpdGhlciBwcmVkZWZpbmVkIGVycm9yc1xuICAgICAqIChmb3IgZXhhbXBsZSBFcnJvcnMuTm9DaG9pY2VNYXRjaGVkKSBvciBhIHNlbGYtZGVmaW5lZCBlcnJvci5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IEFsbCBlcnJvcnNcbiAgICAgKi9cbiAgICByZWFkb25seSBlcnJvcnM/OiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IHNlY29uZHMgdG8gd2FpdCBpbml0aWFsbHkgYmVmb3JlIHJldHJ5aW5nXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBEdXJhdGlvbi5zZWNvbmRzKDEpXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW50ZXJ2YWw/OiBEdXJhdGlvbjtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IHRpbWVzIHRvIHJldHJ5IHRoaXMgcGFydGljdWxhciBlcnJvci5cbiAgICAgKlxuICAgICAqIE1heSBiZSAwIHRvIGRpc2FibGUgcmV0cnkgZm9yIHNwZWNpZmljIGVycm9ycyAoaW4gY2FzZSB5b3UgaGF2ZVxuICAgICAqIGEgY2F0Y2gtYWxsIHJldHJ5IHBvbGljeSkuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAzXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWF4QXR0ZW1wdHM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWNhdGlvbiBmb3IgaG93IG11Y2ggbG9uZ2VyIHRoZSB3YWl0IGludGVydmFsIGdldHMgb24gZXZlcnkgcmV0cnlcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cbiAgICByZWFkb25seSBiYWNrb2ZmUmF0ZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBFcnJvciBoYW5kbGVyIGRldGFpbHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYXRjaFByb3BzIHtcbiAgICAvKipcbiAgICAgKiBFcnJvcnMgdG8gcmVjb3ZlciBmcm9tIGJ5IGdvaW5nIHRvIHRoZSBnaXZlbiBzdGF0ZVxuICAgICAqXG4gICAgICogQSBsaXN0IG9mIGVycm9yIHN0cmluZ3MgdG8gcmV0cnksIHdoaWNoIGNhbiBiZSBlaXRoZXIgcHJlZGVmaW5lZCBlcnJvcnNcbiAgICAgKiAoZm9yIGV4YW1wbGUgRXJyb3JzLk5vQ2hvaWNlTWF0Y2hlZCkgb3IgYSBzZWxmLWRlZmluZWQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBBbGwgZXJyb3JzXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXJyb3JzPzogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBKU09OUGF0aCBleHByZXNzaW9uIHRvIGluZGljYXRlIHdoZXJlIHRvIGluamVjdCB0aGUgZXJyb3IgZGF0YVxuICAgICAqXG4gICAgICogTWF5IGFsc28gYmUgdGhlIHNwZWNpYWwgdmFsdWUgRElTQ0FSRCwgd2hpY2ggd2lsbCBjYXVzZSB0aGUgZXJyb3JcbiAgICAgKiBkYXRhIHRvIGJlIGRpc2NhcmRlZC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0ICRcbiAgICAgKi9cbiAgICByZWFkb25seSByZXN1bHRQYXRoPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNwZWNpYWwgc3RyaW5nIHZhbHVlIHRvIGRpc2NhcmQgc3RhdGUgaW5wdXQsIG91dHB1dCBvciByZXN1bHRcbiAqL1xuZXhwb3J0IGNvbnN0IERJU0NBUkQgPSAnRElTQ0FSRCc7XG4iXX0=