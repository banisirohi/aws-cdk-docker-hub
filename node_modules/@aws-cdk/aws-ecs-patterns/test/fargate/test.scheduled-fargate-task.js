"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const ecs = require("@aws-cdk/aws-ecs");
const events = require("@aws-cdk/aws-events");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../../lib");
module.exports = {
    "Can create a scheduled Fargate Task - with only required props"(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 1 });
        const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
        new lib_1.ScheduledFargateTask(stack, 'ScheduledFargateTask', {
            cluster,
            image: ecs.ContainerImage.fromRegistry('henk'),
            memoryLimitMiB: 512,
            schedule: events.Schedule.expression('rate(1 minute)')
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
            Targets: [
                {
                    Arn: { "Fn::GetAtt": ["EcsCluster97242B84", "Arn"] },
                    EcsParameters: {
                        TaskCount: 1,
                        TaskDefinitionArn: { Ref: "ScheduledFargateTaskScheduledTaskDef521FA675" }
                    },
                    Id: "Target0",
                    Input: "{}",
                    RoleArn: { "Fn::GetAtt": ["ScheduledFargateTaskScheduledTaskDefEventsRole6CE19522", "Arn"] }
                }
            ]
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Essential: true,
                    Image: "henk",
                    LogConfiguration: {
                        LogDriver: "awslogs",
                        Options: {
                            "awslogs-group": {
                                Ref: "ScheduledFargateTaskScheduledTaskDefScheduledContainerLogGroup4134B16C"
                            },
                            "awslogs-stream-prefix": "ScheduledFargateTask",
                            "awslogs-region": {
                                Ref: "AWS::Region"
                            }
                        }
                    },
                    Name: "ScheduledContainer"
                }
            ]
        }));
        test.done();
    },
    "Can create a scheduled Fargate Task - with optional props"(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 1 });
        const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
        new lib_1.ScheduledFargateTask(stack, 'ScheduledFargateTask', {
            cluster,
            image: ecs.ContainerImage.fromRegistry('henk'),
            desiredTaskCount: 2,
            memoryLimitMiB: 512,
            cpu: 2,
            environment: { TRIGGER: 'CloudWatch Events' },
            schedule: events.Schedule.expression('rate(1 minute)')
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
            Targets: [
                {
                    Arn: { "Fn::GetAtt": ["EcsCluster97242B84", "Arn"] },
                    EcsParameters: {
                        TaskCount: 2,
                        TaskDefinitionArn: { Ref: "ScheduledFargateTaskScheduledTaskDef521FA675" }
                    },
                    Id: "Target0",
                    Input: "{}",
                    RoleArn: { "Fn::GetAtt": ["ScheduledFargateTaskScheduledTaskDefEventsRole6CE19522", "Arn"] }
                }
            ]
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Environment: [
                        {
                            Name: "TRIGGER",
                            Value: "CloudWatch Events"
                        }
                    ],
                    Essential: true,
                    Image: "henk",
                    LogConfiguration: {
                        LogDriver: "awslogs",
                        Options: {
                            "awslogs-group": {
                                Ref: "ScheduledFargateTaskScheduledTaskDefScheduledContainerLogGroup4134B16C"
                            },
                            "awslogs-stream-prefix": "ScheduledFargateTask",
                            "awslogs-region": {
                                Ref: "AWS::Region"
                            }
                        }
                    },
                    Name: "ScheduledContainer"
                }
            ]
        }));
        test.done();
    },
    "Scheduled Fargate Task - with MemoryReservation defined"(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 1 });
        const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
        new lib_1.ScheduledFargateTask(stack, 'ScheduledFargateTask', {
            cluster,
            image: ecs.ContainerImage.fromRegistry('henk'),
            schedule: events.Schedule.expression('rate(1 minute)')
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Essential: true,
                    Image: "henk",
                    LogConfiguration: {
                        LogDriver: "awslogs",
                        Options: {
                            "awslogs-group": {
                                Ref: "ScheduledFargateTaskScheduledTaskDefScheduledContainerLogGroup4134B16C"
                            },
                            "awslogs-stream-prefix": "ScheduledFargateTask",
                            "awslogs-region": {
                                Ref: "AWS::Region"
                            }
                        }
                    },
                    Name: "ScheduledContainer"
                }
            ]
        }));
        test.done();
    },
    "Scheduled Fargate Task - with Command defined"(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 1 });
        const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
        new lib_1.ScheduledFargateTask(stack, 'ScheduledFargateTask', {
            cluster,
            image: ecs.ContainerImage.fromRegistry('henk'),
            command: ["-c", "4", "amazon.com"],
            schedule: events.Schedule.expression('rate(1 minute)')
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Command: [
                        "-c",
                        "4",
                        "amazon.com"
                    ],
                    Essential: true,
                    Image: "henk",
                    LogConfiguration: {
                        LogDriver: "awslogs",
                        Options: {
                            "awslogs-group": {
                                Ref: "ScheduledFargateTaskScheduledTaskDefScheduledContainerLogGroup4134B16C"
                            },
                            "awslogs-stream-prefix": "ScheduledFargateTask",
                            "awslogs-region": {
                                Ref: "AWS::Region"
                            }
                        }
                    },
                    Name: "ScheduledContainer"
                }
            ]
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,