"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_certificatemanager_1 = require("@aws-cdk/aws-certificatemanager");
const ec2 = require("@aws-cdk/aws-ec2");
const ecs = require("@aws-cdk/aws-ecs");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const ecsPatterns = require("../../lib");
module.exports = {
    'certificate requires an application load balancer'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        const cert = new aws_certificatemanager_1.Certificate(stack, 'Cert', { domainName: '*.example.com' });
        const toThrow = () => {
            new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
                cluster,
                certificate: cert,
                loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
                image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app")
            });
        };
        // THEN
        test.throws(() => toThrow(), /Cannot add certificate to an NLB/);
        test.done();
    },
    'setting loadBalancerType to Network creates an NLB'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app")
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ElasticLoadBalancingV2::LoadBalancer', {
            Type: 'network'
        }));
        test.done();
    },
    'setting vpc and cluster throws error'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        test.throws(() => new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            vpc,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app")
        }));
        test.done();
    },
    'setting executionRole updated taskDefinition with given execution role'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        const executionRole = new iam.Role(stack, 'ExecutionRole', {
            path: '/',
            assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal("ecs.amazonaws.com"), new iam.ServicePrincipal("ecs-tasks.amazonaws.com"))
        });
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
            executionRole
        });
        // THEN
        const serviceTaskDefinition = assert_1.SynthUtils.synthesize(stack).template.Resources.ServiceTaskDef1922A00F;
        test.deepEqual(serviceTaskDefinition.Properties.ExecutionRoleArn, { 'Fn::GetAtt': ['ExecutionRole605A040B', 'Arn'] });
        test.done();
    },
    'setting taskRole updated taskDefinition with given task role'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        const taskRole = new iam.Role(stack, 'taskRoleTest', {
            path: '/',
            assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal("ecs.amazonaws.com"), new iam.ServicePrincipal("ecs-tasks.amazonaws.com"))
        });
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
            taskRole
        });
        // THEN
        const serviceTaskDefinition = assert_1.SynthUtils.synthesize(stack).template.Resources.ServiceTaskDef1922A00F;
        test.deepEqual(serviceTaskDefinition.Properties.TaskRoleArn, { 'Fn::GetAtt': ['taskRoleTest9DA66B6E', 'Arn'] });
        test.done();
    },
    'setting containerName updates container name with given name'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
            containerName: 'bob'
        });
        // THEN
        const serviceTaskDefinition = assert_1.SynthUtils.synthesize(stack).template.Resources.ServiceTaskDef1922A00F;
        test.deepEqual(serviceTaskDefinition.Properties.ContainerDefinitions[0].Name, 'bob');
        test.done();
    },
    'not setting containerName updates container name with default'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
        });
        // THEN
        const serviceTaskDefinition = assert_1.SynthUtils.synthesize(stack).template.Resources.ServiceTaskDef1922A00F;
        test.deepEqual(serviceTaskDefinition.Properties.ContainerDefinitions[0].Name, 'web');
        test.done();
    },
    'setting servicename updates service name with given name'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
            serviceName: 'bob',
        });
        // THEN
        const serviceTaskDefinition = assert_1.SynthUtils.synthesize(stack).template.Resources.Service9571FDD8;
        test.deepEqual(serviceTaskDefinition.Properties.ServiceName, 'bob');
        test.done();
    },
    'not setting servicename updates service name with default'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            loadBalancerType: ecsPatterns.LoadBalancerType.NETWORK,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
        });
        // THEN
        const serviceTaskDefinition = assert_1.SynthUtils.synthesize(stack).template.Resources.Service9571FDD8;
        test.equal(serviceTaskDefinition.Properties.ServiceName, undefined);
        test.done();
    },
    'setting healthCheckGracePeriod works'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new ecsPatterns.LoadBalancedFargateService(stack, 'Service', {
            loadBalancerType: ecsPatterns.LoadBalancerType.APPLICATION,
            image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
            healthCheckGracePeriod: cdk.Duration.seconds(600),
        });
        // THEN
        const serviceTaskDefinition = assert_1.SynthUtils.synthesize(stack).template.Resources.Service9571FDD8;
        test.deepEqual(serviceTaskDefinition.Properties.HealthCheckGracePeriodSeconds, 600);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,