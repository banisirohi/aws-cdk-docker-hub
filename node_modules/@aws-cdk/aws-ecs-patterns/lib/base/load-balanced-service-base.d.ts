import { ICertificate } from '@aws-cdk/aws-certificatemanager';
import { IVpc } from '@aws-cdk/aws-ec2';
import { BaseService, Cluster, ContainerImage, ICluster, LogDriver, Secret } from '@aws-cdk/aws-ecs';
import { ApplicationListener, ApplicationTargetGroup, BaseLoadBalancer, NetworkListener, NetworkTargetGroup } from '@aws-cdk/aws-elasticloadbalancingv2';
import { IRole } from '@aws-cdk/aws-iam';
import { IHostedZone } from '@aws-cdk/aws-route53';
import cdk = require('@aws-cdk/core');
export declare enum LoadBalancerType {
    APPLICATION = 0,
    NETWORK = 1
}
/**
 * The properties for the base LoadBalancedEc2Service or LoadBalancedFargateService service.
 */
export interface LoadBalancedServiceBaseProps {
    /**
     * The cluster where your service will be deployed
     * You can only specify either vpc or cluster. Alternatively, you can leave both blank
     *
     * @default - create a new cluster; if you do not specify a cluster nor a vpc, a new VPC will be created for you as well
     */
    readonly cluster?: ICluster;
    /**
     * VPC that the cluster instances or tasks are running in
     * You can only specify either vpc or cluster. Alternatively, you can leave both blank
     *
     * @default - use vpc of cluster or create a new one
     */
    readonly vpc?: IVpc;
    /**
     * The image to start.
     */
    readonly image: ContainerImage;
    /**
     * The container port of the application load balancer attached to your Fargate service. Corresponds to container port mapping.
     *
     * @default 80
     */
    readonly containerPort?: number;
    /**
     * Determines whether the Application Load Balancer will be internet-facing
     *
     * @default true
     */
    readonly publicLoadBalancer?: boolean;
    /**
     * Number of desired copies of running tasks
     *
     * @default 1
     */
    readonly desiredCount?: number;
    /**
     * Whether to create an application load balancer or a network load balancer
     *
     * @default application
     */
    readonly loadBalancerType?: LoadBalancerType;
    /**
     * Certificate Manager certificate to associate with the load balancer.
     * Setting this option will set the load balancer port to 443.
     *
     * @default - No certificate associated with the load balancer.
     */
    readonly certificate?: ICertificate;
    /**
     * Environment variables to pass to the container
     *
     * @default - No environment variables.
     */
    readonly environment?: {
        [key: string]: string;
    };
    /**
     * Secret environment variables to pass to the container
     *
     * @default - No secret environment variables.
     */
    readonly secrets?: {
        [key: string]: Secret;
    };
    /**
     * Whether to create an AWS log driver
     *
     * @default true
     */
    readonly enableLogging?: boolean;
    /**
     * Determines whether your Fargate Service will be assigned a public IP address.
     *
     * @default false
     */
    readonly publicTasks?: boolean;
    /**
     * Domain name for the service, e.g. api.example.com
     *
     * @default - No domain name.
     */
    readonly domainName?: string;
    /**
     * Route53 hosted zone for the domain, e.g. "example.com."
     *
     * @default - No Route53 hosted domain zone.
     */
    readonly domainZone?: IHostedZone;
    /**
     * Override for the Fargate Task Definition execution role
     *
     * @default - No value
     */
    readonly executionRole?: IRole;
    /**
     * Override for the Fargate Task Definition task role
     *
     * @default - No value
     */
    readonly taskRole?: IRole;
    /**
     * Override value for the container name
     *
     * @default - No value
     */
    readonly containerName?: string;
    /**
     * Override value for the service name
     *
     * @default CloudFormation-generated name
     */
    readonly serviceName?: string;
    /**
     * The LogDriver to use for logging.
     *
     * @default - AwsLogDriver if enableLogging is true
     */
    readonly logDriver?: LogDriver;
    /**
     * The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
     * Elastic Load Balancing target health checks after a task has first started.
     *
     * @default - defaults to 60 seconds if at least one load balancer is in-use and it is not already set
     */
    readonly healthCheckGracePeriod?: cdk.Duration;
}
/**
 * The base class for LoadBalancedEc2Service and LoadBalancedFargateService services.
 */
export declare abstract class LoadBalancedServiceBase extends cdk.Construct {
    readonly assignPublicIp: boolean;
    readonly desiredCount: number;
    readonly loadBalancerType: LoadBalancerType;
    readonly loadBalancer: BaseLoadBalancer;
    readonly listener: ApplicationListener | NetworkListener;
    readonly targetGroup: ApplicationTargetGroup | NetworkTargetGroup;
    readonly cluster: ICluster;
    readonly logDriver?: LogDriver;
    /**
     * Constructs a new instance of the LoadBalancedServiceBase class.
     */
    constructor(scope: cdk.Construct, id: string, props: LoadBalancedServiceBaseProps);
    protected getDefaultCluster(scope: cdk.Construct, vpc?: IVpc): Cluster;
    protected addServiceAsTarget(service: BaseService): void;
    private createAWSLogDriver;
}
