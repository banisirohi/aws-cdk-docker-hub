"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_ecs_1 = require("@aws-cdk/aws-ecs");
const aws_elasticloadbalancingv2_1 = require("@aws-cdk/aws-elasticloadbalancingv2");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const aws_route53_targets_1 = require("@aws-cdk/aws-route53-targets");
const cdk = require("@aws-cdk/core");
var LoadBalancerType;
(function (LoadBalancerType) {
    LoadBalancerType[LoadBalancerType["APPLICATION"] = 0] = "APPLICATION";
    LoadBalancerType[LoadBalancerType["NETWORK"] = 1] = "NETWORK";
})(LoadBalancerType = exports.LoadBalancerType || (exports.LoadBalancerType = {}));
/**
 * The base class for LoadBalancedEc2Service and LoadBalancedFargateService services.
 */
class LoadBalancedServiceBase extends cdk.Construct {
    /**
     * Constructs a new instance of the LoadBalancedServiceBase class.
     */
    constructor(scope, id, props) {
        super(scope, id);
        if (props.cluster && props.vpc) {
            throw new Error(`You can only specify either vpc or cluster. Alternatively, you can leave both blank`);
        }
        this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);
        // Create log driver if logging is enabled
        const enableLogging = props.enableLogging !== undefined ? props.enableLogging : true;
        this.logDriver = props.logDriver !== undefined ? props.logDriver : enableLogging ? this.createAWSLogDriver(this.node.id) : undefined;
        this.assignPublicIp = props.publicTasks !== undefined ? props.publicTasks : false;
        this.desiredCount = props.desiredCount || 1;
        // Load balancer
        this.loadBalancerType = props.loadBalancerType !== undefined ? props.loadBalancerType : LoadBalancerType.APPLICATION;
        if (this.loadBalancerType !== LoadBalancerType.APPLICATION && this.loadBalancerType !== LoadBalancerType.NETWORK) {
            throw new Error(`invalid loadBalancerType`);
        }
        const internetFacing = props.publicLoadBalancer !== undefined ? props.publicLoadBalancer : true;
        const lbProps = {
            vpc: this.cluster.vpc,
            internetFacing
        };
        if (this.loadBalancerType === LoadBalancerType.APPLICATION) {
            this.loadBalancer = new aws_elasticloadbalancingv2_1.ApplicationLoadBalancer(this, 'LB', lbProps);
        }
        else {
            this.loadBalancer = new aws_elasticloadbalancingv2_1.NetworkLoadBalancer(this, 'LB', lbProps);
        }
        const targetProps = {
            port: 80
        };
        const hasCertificate = props.certificate !== undefined;
        if (hasCertificate && this.loadBalancerType !== LoadBalancerType.APPLICATION) {
            throw new Error("Cannot add certificate to an NLB");
        }
        if (this.loadBalancerType === LoadBalancerType.APPLICATION) {
            this.listener = this.loadBalancer.addListener('PublicListener', {
                port: hasCertificate ? 443 : 80,
                open: true
            });
            this.targetGroup = this.listener.addTargets('ECS', targetProps);
            if (props.certificate !== undefined) {
                this.listener.addCertificateArns('Arns', [props.certificate.certificateArn]);
            }
        }
        else {
            this.listener = this.loadBalancer.addListener('PublicListener', { port: 80 });
            this.targetGroup = this.listener.addTargets('ECS', targetProps);
        }
        if (typeof props.domainName !== 'undefined') {
            if (typeof props.domainZone === 'undefined') {
                throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');
            }
            new aws_route53_1.ARecord(this, "DNS", {
                zone: props.domainZone,
                recordName: props.domainName,
                target: aws_route53_1.AddressRecordTarget.fromAlias(new aws_route53_targets_1.LoadBalancerTarget(this.loadBalancer)),
            });
        }
        new cdk.CfnOutput(this, 'LoadBalancerDNS', { value: this.loadBalancer.loadBalancerDnsName });
    }
    getDefaultCluster(scope, vpc) {
        // magic string to avoid collision with user-defined constructs
        const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;
        const stack = cdk.Stack.of(scope);
        return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) || new aws_ecs_1.Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });
    }
    addServiceAsTarget(service) {
        if (this.loadBalancerType === LoadBalancerType.APPLICATION) {
            this.targetGroup.addTarget(service);
        }
        else {
            this.targetGroup.addTarget(service);
        }
    }
    createAWSLogDriver(prefix) {
        return new aws_ecs_1.AwsLogDriver({ streamPrefix: prefix });
    }
}
exports.LoadBalancedServiceBase = LoadBalancedServiceBase;
//# sourceMappingURL=data:application/json;base64,